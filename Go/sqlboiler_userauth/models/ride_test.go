// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRides(t *testing.T) {
	t.Parallel()

	query := Rides()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRidesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRidesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Rides().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRidesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RideSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRidesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RideExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Ride exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RideExists to return true, but got false.")
	}
}

func testRidesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	rideFound, err := FindRide(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if rideFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRidesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Rides().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRidesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Rides().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRidesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	rideOne := &Ride{}
	rideTwo := &Ride{}
	if err = randomize.Struct(seed, rideOne, rideDBTypes, false, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}
	if err = randomize.Struct(seed, rideTwo, rideDBTypes, false, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRidesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	rideOne := &Ride{}
	rideTwo := &Ride{}
	if err = randomize.Struct(seed, rideOne, rideDBTypes, false, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}
	if err = randomize.Struct(seed, rideTwo, rideDBTypes, false, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = rideOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = rideTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func rideBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func rideAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Ride) error {
	*o = Ride{}
	return nil
}

func testRidesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Ride{}
	o := &Ride{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, rideDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ride object: %s", err)
	}

	AddRideHook(boil.BeforeInsertHook, rideBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	rideBeforeInsertHooks = []RideHook{}

	AddRideHook(boil.AfterInsertHook, rideAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	rideAfterInsertHooks = []RideHook{}

	AddRideHook(boil.AfterSelectHook, rideAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	rideAfterSelectHooks = []RideHook{}

	AddRideHook(boil.BeforeUpdateHook, rideBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	rideBeforeUpdateHooks = []RideHook{}

	AddRideHook(boil.AfterUpdateHook, rideAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	rideAfterUpdateHooks = []RideHook{}

	AddRideHook(boil.BeforeDeleteHook, rideBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	rideBeforeDeleteHooks = []RideHook{}

	AddRideHook(boil.AfterDeleteHook, rideAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	rideAfterDeleteHooks = []RideHook{}

	AddRideHook(boil.BeforeUpsertHook, rideBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	rideBeforeUpsertHooks = []RideHook{}

	AddRideHook(boil.AfterUpsertHook, rideAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	rideAfterUpsertHooks = []RideHook{}
}

func testRidesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRidesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(rideColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRideToOnePassengerUsingPassenger(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Ride
	var foreign Passenger

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, passengerDBTypes, false, passengerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passenger struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PassengerID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Passenger().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RideSlice{&local}
	if err = local.L.LoadPassenger(ctx, tx, false, (*[]*Ride)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Passenger == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Passenger = nil
	if err = local.L.LoadPassenger(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Passenger == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRideToOneSetOpPassengerUsingPassenger(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ride
	var b, c Passenger

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rideDBTypes, false, strmangle.SetComplement(ridePrimaryKeyColumns, rideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, passengerDBTypes, false, strmangle.SetComplement(passengerPrimaryKeyColumns, passengerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, passengerDBTypes, false, strmangle.SetComplement(passengerPrimaryKeyColumns, passengerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Passenger{&b, &c} {
		err = a.SetPassenger(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Passenger != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Rides[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PassengerID, x.ID) {
			t.Error("foreign key was wrong value", a.PassengerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PassengerID))
		reflect.Indirect(reflect.ValueOf(&a.PassengerID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PassengerID, x.ID) {
			t.Error("foreign key was wrong value", a.PassengerID, x.ID)
		}
	}
}

func testRideToOneRemoveOpPassengerUsingPassenger(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ride
	var b Passenger

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, rideDBTypes, false, strmangle.SetComplement(ridePrimaryKeyColumns, rideColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, passengerDBTypes, false, strmangle.SetComplement(passengerPrimaryKeyColumns, passengerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPassenger(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePassenger(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Passenger().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Passenger != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PassengerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Rides) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testRidesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRidesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RideSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRidesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rides().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	rideDBTypes = map[string]string{`ID`: `int`, `PassengerID`: `int`}
	_           = bytes.MinRead
)

func testRidesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ridePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(rideAllColumns) == len(ridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rideDBTypes, true, ridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRidesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(rideAllColumns) == len(ridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ride{}
	if err = randomize.Struct(seed, o, rideDBTypes, true, rideColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, rideDBTypes, true, ridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(rideAllColumns, ridePrimaryKeyColumns) {
		fields = rideAllColumns
	} else {
		fields = strmangle.SetComplement(
			rideAllColumns,
			ridePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RideSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRidesUpsert(t *testing.T) {
	t.Parallel()

	if len(rideAllColumns) == len(ridePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRideUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ride{}
	if err = randomize.Struct(seed, &o, rideDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ride: %s", err)
	}

	count, err := Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, rideDBTypes, false, ridePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ride struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ride: %s", err)
	}

	count, err = Rides().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
