// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Ride is an object representing the database table.
type Ride struct {
	ID          int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PassengerID null.Int `boil:"passenger_id" json:"passenger_id,omitempty" toml:"passenger_id" yaml:"passenger_id,omitempty"`

	R *rideR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L rideL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RideColumns = struct {
	ID          string
	PassengerID string
}{
	ID:          "id",
	PassengerID: "passenger_id",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var RideWhere = struct {
	ID          whereHelperint
	PassengerID whereHelpernull_Int
}{
	ID:          whereHelperint{field: "`ride`.`id`"},
	PassengerID: whereHelpernull_Int{field: "`ride`.`passenger_id`"},
}

// RideRels is where relationship names are stored.
var RideRels = struct {
	Passenger string
}{
	Passenger: "Passenger",
}

// rideR is where relationships are stored.
type rideR struct {
	Passenger *Passenger `boil:"Passenger" json:"Passenger" toml:"Passenger" yaml:"Passenger"`
}

// NewStruct creates a new relationship struct
func (*rideR) NewStruct() *rideR {
	return &rideR{}
}

// rideL is where Load methods for each relationship are stored.
type rideL struct{}

var (
	rideAllColumns            = []string{"id", "passenger_id"}
	rideColumnsWithoutDefault = []string{"id", "passenger_id"}
	rideColumnsWithDefault    = []string{}
	ridePrimaryKeyColumns     = []string{"id"}
)

type (
	// RideSlice is an alias for a slice of pointers to Ride.
	// This should generally be used opposed to []Ride.
	RideSlice []*Ride
	// RideHook is the signature for custom Ride hook methods
	RideHook func(context.Context, boil.ContextExecutor, *Ride) error

	rideQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	rideType                 = reflect.TypeOf(&Ride{})
	rideMapping              = queries.MakeStructMapping(rideType)
	ridePrimaryKeyMapping, _ = queries.BindMapping(rideType, rideMapping, ridePrimaryKeyColumns)
	rideInsertCacheMut       sync.RWMutex
	rideInsertCache          = make(map[string]insertCache)
	rideUpdateCacheMut       sync.RWMutex
	rideUpdateCache          = make(map[string]updateCache)
	rideUpsertCacheMut       sync.RWMutex
	rideUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var rideBeforeInsertHooks []RideHook
var rideBeforeUpdateHooks []RideHook
var rideBeforeDeleteHooks []RideHook
var rideBeforeUpsertHooks []RideHook

var rideAfterInsertHooks []RideHook
var rideAfterSelectHooks []RideHook
var rideAfterUpdateHooks []RideHook
var rideAfterDeleteHooks []RideHook
var rideAfterUpsertHooks []RideHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Ride) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Ride) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Ride) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Ride) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Ride) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Ride) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Ride) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Ride) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Ride) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range rideAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRideHook registers your hook function for all future operations.
func AddRideHook(hookPoint boil.HookPoint, rideHook RideHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		rideBeforeInsertHooks = append(rideBeforeInsertHooks, rideHook)
	case boil.BeforeUpdateHook:
		rideBeforeUpdateHooks = append(rideBeforeUpdateHooks, rideHook)
	case boil.BeforeDeleteHook:
		rideBeforeDeleteHooks = append(rideBeforeDeleteHooks, rideHook)
	case boil.BeforeUpsertHook:
		rideBeforeUpsertHooks = append(rideBeforeUpsertHooks, rideHook)
	case boil.AfterInsertHook:
		rideAfterInsertHooks = append(rideAfterInsertHooks, rideHook)
	case boil.AfterSelectHook:
		rideAfterSelectHooks = append(rideAfterSelectHooks, rideHook)
	case boil.AfterUpdateHook:
		rideAfterUpdateHooks = append(rideAfterUpdateHooks, rideHook)
	case boil.AfterDeleteHook:
		rideAfterDeleteHooks = append(rideAfterDeleteHooks, rideHook)
	case boil.AfterUpsertHook:
		rideAfterUpsertHooks = append(rideAfterUpsertHooks, rideHook)
	}
}

// One returns a single ride record from the query.
func (q rideQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Ride, error) {
	o := &Ride{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ride")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Ride records from the query.
func (q rideQuery) All(ctx context.Context, exec boil.ContextExecutor) (RideSlice, error) {
	var o []*Ride

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Ride slice")
	}

	if len(rideAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Ride records in the query.
func (q rideQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ride rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q rideQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ride exists")
	}

	return count > 0, nil
}

// Passenger pointed to by the foreign key.
func (o *Ride) Passenger(mods ...qm.QueryMod) passengerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PassengerID),
	}

	queryMods = append(queryMods, mods...)

	query := Passengers(queryMods...)
	queries.SetFrom(query.Query, "`passenger`")

	return query
}

// LoadPassenger allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (rideL) LoadPassenger(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRide interface{}, mods queries.Applicator) error {
	var slice []*Ride
	var object *Ride

	if singular {
		object = maybeRide.(*Ride)
	} else {
		slice = *maybeRide.(*[]*Ride)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &rideR{}
		}
		if !queries.IsNil(object.PassengerID) {
			args = append(args, object.PassengerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &rideR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PassengerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PassengerID) {
				args = append(args, obj.PassengerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`passenger`),
		qm.WhereIn(`passenger.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Passenger")
	}

	var resultSlice []*Passenger
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Passenger")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for passenger")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for passenger")
	}

	if len(rideAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Passenger = foreign
		if foreign.R == nil {
			foreign.R = &passengerR{}
		}
		foreign.R.Rides = append(foreign.R.Rides, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PassengerID, foreign.ID) {
				local.R.Passenger = foreign
				if foreign.R == nil {
					foreign.R = &passengerR{}
				}
				foreign.R.Rides = append(foreign.R.Rides, local)
				break
			}
		}
	}

	return nil
}

// SetPassenger of the ride to the related item.
// Sets o.R.Passenger to related.
// Adds o to related.R.Rides.
func (o *Ride) SetPassenger(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Passenger) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ride` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"passenger_id"}),
		strmangle.WhereClause("`", "`", 0, ridePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PassengerID, related.ID)
	if o.R == nil {
		o.R = &rideR{
			Passenger: related,
		}
	} else {
		o.R.Passenger = related
	}

	if related.R == nil {
		related.R = &passengerR{
			Rides: RideSlice{o},
		}
	} else {
		related.R.Rides = append(related.R.Rides, o)
	}

	return nil
}

// RemovePassenger relationship.
// Sets o.R.Passenger to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Ride) RemovePassenger(ctx context.Context, exec boil.ContextExecutor, related *Passenger) error {
	var err error

	queries.SetScanner(&o.PassengerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("passenger_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Passenger = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Rides {
		if queries.Equal(o.PassengerID, ri.PassengerID) {
			continue
		}

		ln := len(related.R.Rides)
		if ln > 1 && i < ln-1 {
			related.R.Rides[i] = related.R.Rides[ln-1]
		}
		related.R.Rides = related.R.Rides[:ln-1]
		break
	}
	return nil
}

// Rides retrieves all the records using an executor.
func Rides(mods ...qm.QueryMod) rideQuery {
	mods = append(mods, qm.From("`ride`"))
	return rideQuery{NewQuery(mods...)}
}

// FindRide retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRide(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Ride, error) {
	rideObj := &Ride{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ride` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, rideObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ride")
	}

	return rideObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Ride) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ride provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rideColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	rideInsertCacheMut.RLock()
	cache, cached := rideInsertCache[key]
	rideInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			rideAllColumns,
			rideColumnsWithDefault,
			rideColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(rideType, rideMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(rideType, rideMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ride` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ride` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ride` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, ridePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ride")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ride")
	}

CacheNoHooks:
	if !cached {
		rideInsertCacheMut.Lock()
		rideInsertCache[key] = cache
		rideInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Ride.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Ride) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	rideUpdateCacheMut.RLock()
	cache, cached := rideUpdateCache[key]
	rideUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			rideAllColumns,
			ridePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ride, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ride` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, ridePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(rideType, rideMapping, append(wl, ridePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ride row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ride")
	}

	if !cached {
		rideUpdateCacheMut.Lock()
		rideUpdateCache[key] = cache
		rideUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q rideQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ride")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ride")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RideSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ride` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ridePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in ride slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all ride")
	}
	return rowsAff, nil
}

var mySQLRideUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Ride) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ride provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(rideColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRideUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	rideUpsertCacheMut.RLock()
	cache, cached := rideUpsertCache[key]
	rideUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			rideAllColumns,
			rideColumnsWithDefault,
			rideColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			rideAllColumns,
			ridePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert ride, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`ride`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ride` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(rideType, rideMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(rideType, rideMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for ride")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(rideType, rideMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for ride")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for ride")
	}

CacheNoHooks:
	if !cached {
		rideUpsertCacheMut.Lock()
		rideUpsertCache[key] = cache
		rideUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Ride record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Ride) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Ride provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), ridePrimaryKeyMapping)
	sql := "DELETE FROM `ride` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ride")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ride")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q rideQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no rideQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ride")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ride")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RideSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(rideBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ride` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ridePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ride slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ride")
	}

	if len(rideAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Ride) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRide(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RideSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RideSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), ridePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ride`.* FROM `ride` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, ridePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RideSlice")
	}

	*o = slice

	return nil
}

// RideExists checks if the Ride row exists.
func RideExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ride` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ride exists")
	}

	return exists, nil
}
